buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.1'
        classpath "com.fernandocejas.frodo:frodo-plugin:0.8.3"
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'com.getkeepsafe.dexcount'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


def ext = rootProject.ext

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.suli.myutils"
        minSdkVersion ext.minSdkVersion
        targetSdkVersion ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        release {
            Properties signingProperties = new Properties()
            signingProperties.load(rootProject.file("signing.properties").newDataInputStream())
            storeFile rootProject.file(signingProperties.get("storeFile"))
            storePassword signingProperties.get("storePassword") ?: System.getenv("STORE_PASSWORD") ?: System.console()?.readLine("\nStore password:")
            keyAlias signingProperties.get("keyAlias")
            keyPassword signingProperties.get("keyPassword") ?: System.getenv("KEY_PASSWORD") ?: System.console()?.readLine("\nKey password:")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        production {
            dimension "default"
            applicationId "com.suli.myutils"
        }

        dev {
            dimension "default"
            applicationId "com.suli.myutils.dev"
        }
    }
}


dependencies {
    compile project(':common')

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${ext.supportedVersion}"
    compile "com.android.support:gridlayout-v7:${ext.supportedVersion}"
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.alibaba:fastjson:1.2.47'
    compile 'com.squareup.assertj:assertj-android:1.0.0'

    // test
    testCompile 'junit:junit:4.12'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile "org.mockito:mockito-core:1.10.19"

    // net
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
//    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'

    compile 'com.facebook.stetho:stetho:1.5.0'
    compile 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    compile 'com.facebook.stetho:stetho-urlconnection:1.3.0'

    // orm
    compile 'de.greenrobot:greendao:2.0.0'

    // RxJava
    compile 'io.reactivex:rxjava:1.2.5'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // crash
    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true
    }
    compile('com.appsee:appsee-android:2.3.1@aar') {
        transitive = true
    }
//    compile('io.fabric.sdk.android:fabric:1.3.10@aar') {
//        transitive = true;
//    }
}
